{"version":3,"sources":["components/header.js","components/filtering.js","components/peopleform.js","services/persons.js","components/showpeople.js","components/notification.js","App.js","serviceWorker.js","index.js"],"names":["Header","text","Filtering","valueHandlerFilter","filter","onChange","value","PeopleForm","submitHandler","valueHandlerName","newName","valueHandlerNumber","newNumber","setNewName","typed","onSubmit","onClick","event","type","baseUrl","console","log","axios","get","then","response","data","newObject","post","id","put","delete","ShowPeople","persons","setPersons","setMessage","filteredList","i","name","toLowerCase","includes","length","map","person","key","number","window","confirm","personsService","allPersons","setTimeout","deletePerson","Notification","message","errorMessage","style","color","background","fontSize","borderStyle","borderRadius","padding","marginBottom","App","useState","setTyped","setNewNumber","setFilter","setErrorMessage","useEffect","target","preventDefault","every","successResponse","catch","error","JSON","stringify","find","p","alert","updatedObject","updatedPersons","concat","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fd0a6393.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = ({ text }) => (\r\n    <h2>{text}</h2>\r\n)\r\n\r\nexport default Header","import React from 'react'\r\n\r\nconst Filtering = ({ valueHandlerFilter, filter, text }) => (\r\n    <form>\r\n        <div>\r\n            <p>{text}</p>\r\n            <input onChange={valueHandlerFilter} value={filter} />\r\n        </div>\r\n    </form>\r\n)\r\n\r\nexport default Filtering","import React from 'react'\r\n\r\nconst PeopleForm = ({ submitHandler, valueHandlerName, newName, valueHandlerNumber, newNumber, setNewName, typed, text }) => {\r\n    const emptyField = (event) => {\r\n        if (!typed) {\r\n            setNewName('')\r\n        }\r\n    }\r\n    return (\r\n        <form onSubmit={submitHandler}>\r\n            <div>\r\n                <h2>{text}</h2>\r\n      name: <input onChange={valueHandlerName} value={newName} onClick={emptyField} />\r\n      number: <input onChange={valueHandlerNumber} value={newNumber} />\r\n            </div>\r\n            <div>\r\n                <button type=\"submit\">Add</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default PeopleForm","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\n\r\nconst getAll = () => {\r\n    console.log(\"frontend service get all\")\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    console.log(\"frontend service create\")\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\n\r\nconst update = (id, newObject) => {\r\n    console.log(\"frontend service update\")\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\n\r\nconst remove = (id) => {\r\n    console.log(\"frontend service remove\")\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\n\r\nexport default { getAll, create, update, remove }","import React from 'react'\r\nimport personsService from '../services/persons'\r\n\r\nconst ShowPeople = ({ persons, filter, setPersons, text, setMessage }) => {\r\n    const filteredList = persons.filter(i => i.name.toLowerCase().includes(filter.toLowerCase()))\r\n\r\n    const deletePerson = (person) => {\r\n        const confirmation = window.confirm(`Do you really want to remove ${person.name} from phonebook?`);\r\n        if (confirmation) {\r\n            personsService.remove(person.id).then(response => {\r\n                personsService\r\n                    .getAll()\r\n                    .then(allPersons => {\r\n                        setPersons(allPersons)\r\n                    })\r\n                    .then(setMessage(`Removed ${person.name}'s from phonebook`),\r\n                        setTimeout(() => {\r\n                            setMessage(null)\r\n                        }, 5000)\r\n                    )\r\n            })\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            {\r\n                persons.length > 0 ? (\r\n                    <h2>{text}</h2>\r\n                ) : (<h5>Here you could see list of people with their numbers.. when you first add some ones to the list!</h5>)\r\n            }\r\n            {\r\n                filteredList.map((person, i) => {\r\n                    return <h3 key={i}>{person.name} {person.number} <button onClick={() => deletePerson(person)}>Remove</button></h3>\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ShowPeople","import React from 'react'\r\n\r\n\r\nconst Notification = ({ message, errorMessage }) => {\r\n    const notificationStyle = {\r\n        color: 'green',\r\n        background: 'lightgrey',\r\n        fontSize: 20,\r\n        borderStyle: 'solid',\r\n        borderRadius: 5,\r\n        padding: 10,\r\n        marginBottom: 10\r\n    }\r\n\r\n    const errorStyle = {\r\n        color: 'red',\r\n        background: 'lightgrey',\r\n        fontSize: 20,\r\n        borderStyle: 'solid',\r\n        borderRadius: 5,\r\n        padding: 10,\r\n        marginBottom: 10\r\n    }\r\n\r\n    if (message) {\r\n        return (\r\n            <div style={notificationStyle}>\r\n                <h3>{message}</h3>\r\n            </div>\r\n        )\r\n    } else if (errorMessage) {\r\n        return (\r\n            <div style={errorStyle}>\r\n                <h3>{errorMessage}</h3>\r\n            </div>\r\n        )\r\n    } else {\r\n        return null\r\n    }\r\n\r\n}\r\n\r\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport Header from './components/header'\nimport Filtering from './components/filtering'\nimport PeopleForm from './components/peopleform'\nimport ShowPeople from './components/showpeople'\nimport Notification from './components/notification'\nimport personsService from './services/persons'\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('Write name...')\n  const [typed, setTyped] = useState(false)\n  const [newNumber, setNewNumber] = useState('')\n  const [filter, setFilter] = useState('')\n  const [message, setMessage] = useState('')\n  const [errorMessage, setErrorMessage] = useState('')\n\n  const valueHandlerNumber = (event) => setNewNumber(event.target.value)\n  const valueHandlerFilter = (event) => setFilter(event.target.value)\n  const valueHandlerName = (event) => {\n    setNewName(event.target.value)\n    setTyped(true)\n  }\n\n  useEffect(() => {\n    personsService\n      .getAll()\n      .then(allPersons => {\n        setPersons(allPersons)\n      })\n  }, [])\n\n\n  const submitHandler = (event) => {\n    event.preventDefault()\n    let newObject = { name: newName, number: newNumber }\n\n    let test = persons.every(person => person.name.toLowerCase() !== newName.toLowerCase())\n    if (test) {\n      setNewName('')\n      setNewNumber('')\n      personsService.create(newObject).then(successResponse => {\n        if (successResponse.name) {\n          personsService.getAll().then(allPersons => setPersons(allPersons))\n          console.log(\"successResponse\", successResponse)\n          setMessage(`Added ${newName}, ${newNumber}`)\n          setTimeout(() => {\n            setMessage(null)\n          }, 6000)\n        }\n      })\n        .catch(error => {\n          setErrorMessage(\n            `Error happened when tried to add new person and number! ${JSON.stringify(error.response.data)}`\n          )\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 15000)\n        })\n    } else {\n\n      let existingNumber = persons.find(p => p.number === newNumber)\n      if (existingNumber) {\n        alert(`${newName} with this same phonenumber is already added to phonebook`)\n      } else {\n        const confirmation = window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`);\n        if (confirmation) {\n          // Fetch requested person's ID. Then update server with ID info and update front end view\n          personsService.getAll().then(response => {\n            const id = response.filter(p => p.name === newName)[0].id\n            personsService.update(id, newObject).then(updatedObject => {\n              let updatedPersons = persons.filter(p => p.name !== newName).concat(updatedObject)\n              setPersons(updatedPersons)\n            }\n            ).then(setMessage(`Changed ${newName}'s phonenumber to ${newNumber}`),\n              setTimeout(() => {\n                setMessage(null)\n              }, 5000)\n            )\n          }).catch(error => {\n            setErrorMessage(\n              `Error happened when tried to change phonenumber of existing person! ${JSON.stringify(error.response.data)}`\n            )\n            setTimeout(() => {\n              setErrorMessage(null)\n            }, 5000)\n          })\n        }\n      }\n    }\n  }\n\n\n  return (\n    <div>\n      <Header text=\"Phonebook\" />\n      <Notification message={message} errorMessage={errorMessage} />\n      <Filtering valueHandlerFilter={valueHandlerFilter} filter={filter} text={\"Filter shown with\"} />\n      <PeopleForm submitHandler={submitHandler} valueHandlerName={valueHandlerName} newName={newName} valueHandlerNumber={valueHandlerNumber} newNumber={newNumber} setNewName={setNewName} typed={typed} text={\"Add a new\"} />\n      <ShowPeople persons={persons} setPersons={setPersons} filter={filter} text={\"People and their numbers\"} setMessage={setMessage} />\n    </div>\n  )\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}